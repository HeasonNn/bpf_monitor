# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rule_pb2 as rule__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rule_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RuleServiceStub(object):
    """**定义 gRPC 服务**
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRule = channel.unary_unary(
                '/rule.RuleService/AddRule',
                request_serializer=rule__pb2.RuleRequest.SerializeToString,
                response_deserializer=rule__pb2.RuleResponse.FromString,
                _registered_method=True)
        self.DeleteRule = channel.unary_unary(
                '/rule.RuleService/DeleteRule',
                request_serializer=rule__pb2.RuleRequest.SerializeToString,
                response_deserializer=rule__pb2.RuleResponse.FromString,
                _registered_method=True)
        self.AddRuleBatch = channel.unary_unary(
                '/rule.RuleService/AddRuleBatch',
                request_serializer=rule__pb2.RuleBatchRequest.SerializeToString,
                response_deserializer=rule__pb2.RuleResponse.FromString,
                _registered_method=True)
        self.DeleteRuleBatch = channel.unary_unary(
                '/rule.RuleService/DeleteRuleBatch',
                request_serializer=rule__pb2.RuleBatchRequest.SerializeToString,
                response_deserializer=rule__pb2.RuleResponse.FromString,
                _registered_method=True)
        self.ListRules = channel.unary_unary(
                '/rule.RuleService/ListRules',
                request_serializer=rule__pb2.RuleListRequest.SerializeToString,
                response_deserializer=rule__pb2.RuleListResponse.FromString,
                _registered_method=True)


class RuleServiceServicer(object):
    """**定义 gRPC 服务**
    """

    def AddRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRuleBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRuleBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRule': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRule,
                    request_deserializer=rule__pb2.RuleRequest.FromString,
                    response_serializer=rule__pb2.RuleResponse.SerializeToString,
            ),
            'DeleteRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRule,
                    request_deserializer=rule__pb2.RuleRequest.FromString,
                    response_serializer=rule__pb2.RuleResponse.SerializeToString,
            ),
            'AddRuleBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRuleBatch,
                    request_deserializer=rule__pb2.RuleBatchRequest.FromString,
                    response_serializer=rule__pb2.RuleResponse.SerializeToString,
            ),
            'DeleteRuleBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRuleBatch,
                    request_deserializer=rule__pb2.RuleBatchRequest.FromString,
                    response_serializer=rule__pb2.RuleResponse.SerializeToString,
            ),
            'ListRules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRules,
                    request_deserializer=rule__pb2.RuleListRequest.FromString,
                    response_serializer=rule__pb2.RuleListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rule.RuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rule.RuleService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RuleService(object):
    """**定义 gRPC 服务**
    """

    @staticmethod
    def AddRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rule.RuleService/AddRule',
            rule__pb2.RuleRequest.SerializeToString,
            rule__pb2.RuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rule.RuleService/DeleteRule',
            rule__pb2.RuleRequest.SerializeToString,
            rule__pb2.RuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddRuleBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rule.RuleService/AddRuleBatch',
            rule__pb2.RuleBatchRequest.SerializeToString,
            rule__pb2.RuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRuleBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rule.RuleService/DeleteRuleBatch',
            rule__pb2.RuleBatchRequest.SerializeToString,
            rule__pb2.RuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rule.RuleService/ListRules',
            rule__pb2.RuleListRequest.SerializeToString,
            rule__pb2.RuleListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
